-# frozen_string_literal: true
= simple_form_for(@member) do |f|
  = f.error_notification
  = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?
  .form-inputs
    .text-center
      - if @member.avatar.attached?
        %img.rounded{:alt => "XLPLAN", :src => "#{url_for(@member.avatar)}", :width => "200px"}/
      - else
        .far.fa-user{:style => "font-size:60px"}
        .row
        = f.label :avatar
      %p
      = f.file_field :avatar
    = f.input :first_name, autofocus: true, input_html: { autocomplete: 'nope' }
    = f.input :last_name, input_html: { autocomplete: 'nope' }
    = f.input :phone_number, input_html: { autocomplete: 'nope' }
    = f.input :email, input_html: { autocomplete: 'nope' }
    = f.input :date_of_birth, start_year: Date.today.year - 65, end_year: Date.today.year - 3, include_blank: true
    %p
    = f.label :gender
    = f.error :gender, class: 'text-danger' if f.object.errors.any?
    %br
    = f.radio_button :gender, 'undisclosed'
    = f.label :gender_undisclosed
    = f.radio_button :gender, 'female'
    = f.label :gender_female
    = f.radio_button :gender, 'male'
    = f.label :gender_male
    / #### ADDRESS FIELD STARTS HERE ####
    .fields
      = f.fields_for :address, OpenStruct.new(f.object.address || {}) do |a|
        = f.label :country
        = a.text_field :country, id: :country, input_html: { autocomplete: 'nope' }, class: 'form-control'
        = f.label :city
        = a.text_field :city, id: :city, input_html: { autocomplete: 'nope' }, class: 'form-control'
        = f.label :street
        = a.text_field :street, id: :street, input_html: { autocomplete: 'nope' }, class: 'form-control'
        = f.label :zip
        = a.text_field :zip, id: :zip, input_html: { autocomplete: 'nope' }, class: 'form-control'
    / #### ADDRESS FIELD ENDS HERE ####

    /= f.label :time_zone
    /= f.time_zone_select :time_zone, /Europe/, :default => "Kyiv"
    = f.input :time_zone
    = f.input :status, :as => :radio_buttons, :collection => Member.statuses.keys.to_a, label:false
    %hr
    = f.label :skills
    = f.select :service_category_ids, ServiceCategory.all.pluck(:name, :id), {}, { multiple: true, class: "selectize" }

    /= f.label :location_id
    /= f.error :location, class: 'text-danger'
    /= f.select :location_id, Location.all.map{|c| [c.name, c.id]}, {include_blank: Location.all.length > 1}, class: 'selectize'
    = f.association :location, collection: f.object.location_id ? Location.active_or_id(f.object.location_id) : Location.active, :include_blank => false
  %hr
  .form-actions
    = f.button :submit, class: "btn btn-success"