- model_class = InboundPayment
= search_form_for @q, url: inbound_payments_path do |f|
  .card.card-default
    .container-fluid
      .card-heading
        %h4.card-title.float-left{:style => "padding-top: 7.5px;"} 
          .fa.fa-dollar-sign
          %b=t '.title', :default => model_class.model_name.human.pluralize.titleize
        %h4.card-title.float-right{:style => "padding-top: 7.5px;"} 
          %button.btn.btn-sm.btn-secondary{"data-target" => "#accordion", "data-toggle" => "collapse", :type => "button"}
            .fa.fa-search
            .fa.fa-chevron-down
            /Search
          = link_to "", inbound_payments_path, class: "btn btn-secondary fa fa-redo", title: 'Refresh', 'data-toggle' => 'tooltip', 'data-placement' => 'top'
          - if policy(InboundPayment).create?
            = link_to t('.new', :default => t("helpers.links.new")), new_inbound_payment_path, class: 'btn btn-sm btn-primary'
    #accordion.collapse
      .card-header
        .row
          .col-md-4
            = model_class.human_attribute_name(:id)
            = f.text_field :slug_cont, class: "form-control", placeholder: "#", style: 'float: left; width: 100%; display: block', autofocus: true
            .row
            = model_class.human_attribute_name(:client_id)
            = f.select :client_full_name_cont, Client.all.map{|c| [c.full_name, c.full_name]}, {include_blank: Client.all.length > 1}, class: 'selectize'
          .col-md-4
            .input-daterange
              = model_class.human_attribute_name(:after)
              = f.text_field :created_at_gteq, "data-provide" => 'datepicker', class: "form-control", placeholder: "Date >= to", :autocomplete => :off
              = model_class.human_attribute_name(:before)
              = f.text_field :created_at_datelteq, "data-provide" => 'datepicker', class: "form-control", placeholder: "Date <= to", :autocomplete => :off
          .col-md-4
            .row
            = f.submit
- @inbound_payments.each do |inbound_payment|
  .card
    .card-header.bg-light
      .row
        .col-lg-2
          .text-center
            = link_to inbound_payment.slug, inbound_payment_path(inbound_payment) if policy(inbound_payment).show?
            .row
            = link_to "", edit_inbound_payment_path(inbound_payment), class: "btn btn-warning fa fa-edit btn-sm"  if policy(inbound_payment).edit?
            = link_to "", inbound_payment, class: "btn btn-primary fa fa-eye btn-sm" if policy(inbound_payment).show?
            = link_to "", inbound_payment_path(inbound_payment, format: :pdf), class: "btn btn-primary fa fa-file-pdf btn-sm"  if policy(inbound_payment).show?
            = link_to "", inbound_payment, method: :delete, data: { confirm: 'Are you sure?' }, class: "btn btn-danger fa fa-trash btn-sm"  if policy(inbound_payment).destroy?
        .col-lg-4
          .fa.fa-user
          - if inbound_payment.client.present?
            = link_to inbound_payment.client, client_path(inbound_payment.client)
          .row
          .fa.fa-hand-holding-usd
          = number_to_currency(inbound_payment.amount_cents, unit: "#{Tenant.current_tenant.default_currency.upcase}", format: "%n %u")
          .badge.badge-secondary.text-white
            = inbound_payment.payment_method
        .col-lg-4
          .fa.fa-clock
          #{l(inbound_payment.created_at, format: "%a")} #{l(inbound_payment.created_at, format: "%d/%b/%Y %H:%M")}
%p
.container.table-responsive
  = will_paginate @inbound_payments, renderer: WillPaginate::ActionView::BootstrapLinkRenderer
%br